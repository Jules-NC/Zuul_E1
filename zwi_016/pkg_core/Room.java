package pkg_core;import java.util.Set;import java.util.HashMap;import java.util.Iterator;import java.util.ArrayList;import java.util.Random;/** * Class Room - une salle dans une salle d'aventure, avec des murs (meme pas en plus et pleins d'autres trucs). * * * Une "Room" représente un emplacement dans le paysage du jeu. * Elle est reliée à d'autres pièces via des sorties. * Pour chaque sortie existante, la chambre stocke une référence à la pièce voisine. * Presence d'un inventaire stockant des items @see Item. *  * @author  Jules Neghnagh--Chenavas * @version ProtoX-97BF999-C#38 */public class Room {    private String description;    private HashMap<String,Room> exits;        // stores exits of this room.    private String imageName;    protected ItemList items;    protected ArrayList<Pnj> pList;    private boolean canBack;    /**     * @param image String de l'image de la salle.     * @param description String de la description de la salle.     *      * Cree une Room avec une image et une description.     */    public Room(String description, String image)     {        this.description = description;        exits = new HashMap<String,Room>();        pList = new ArrayList<Pnj>(0);        this.items = new ItemList();        imageName = image;    }    public Room(String description, String image, boolean cb)     {        this.description = description;        exits = new HashMap<String,Room>();        this.items = new ItemList();        imageName = image;        this.canBack = cb;    }    /**     * @return une String contenant le nom de tous les objets de la salle.     *      * voila quoi.     *      */    private String itemsDescription(){        String res = "|Items:\n";        return res;    }    /**     * @return la desc de spnj de la salle     */    private String pnjDescription(){        try{            String res = "|Personnages:\n";            for(Pnj vS : pList){                res += "    |"+vS.getName()+"\n";            }            return res;        }        catch(Exception e){        }        return ".";    }    /**     *      * renvoie l'item portant le nom demande.     *      * @param le nom de l'item recherche.     * @return l'item en question. @see Item.     */    public ItemList getItemList(){        return this.items;    }    /**     * get les pnj du nom égal     * @return un pnj     */    public Pnj getPnj(String s){        for(Pnj p : pList){            if(p.getName().equals(s))                return p;        }        return null;    }    /**     * Definit une sortie dans la direction donnee     * @param direction une String du nom de la direction.     * @param neighbor la Room associee a la direction. @see Room.     */    public void setExit(String direction, Room neighbor)     {        exits.put(direction, neighbor);    }    /**     * @param p un Pnj     * ajoute un pnj     */    public void addPnj(Pnj p){        pList.add(p);    }    /**     * retourne la description courte de la room.     */    public String getShortDescription()    {        return description;    }    /**     * retourne une longue description de la room, avec la description, les sorties et l'inventaire.     */    public String getLongDescription()    {        return "|position:" + description + ".\n" + getExitString() +"\n" + items.desc()+ "\n"+ pnjDescription();    }    /**     * Renvoie une String qui contient toutes les sorties     */    private String getExitString()    {        StringBuilder returnString = new StringBuilder( "|Sorties:" );        for ( String vS : exits.keySet() )            returnString.append( " " + vS );        return returnString.toString();    }    /**     * @param direction la String de la direction recherchee.     * @return une Room, null si rien dans la direction donnee.     *      * Retour de la salle qui est atteint si nous allons de cette pièce dans la direction      * "direction". S'il n'y a pas de place dans cette direction, retour null.Return...     */    public Room getExit(String direction)     {        return exits.get(direction);    }    /**     * @return une string qui est le nom de l'image (chemin d'accès).     */    public String getImageName()    {        return imageName;    }    /**     * @deprecated     * ne sert à rien     */    public Room getAleaExit(){        Random r = new Random();        Room v = this.exits.get(this.exits.get(r.nextInt(this.exits.size())));        return v;        //return this.exits.get(v);    }    /**     * dis si on peut retourner en arriere     * @return true si vrai false sinon (ret en arrière)     */    public boolean isTrap(){        return this.canBack;    }    /**     * desc de la salle     * @return la desc de la salle     */    @Override public String toString(){        return this.description;    }}